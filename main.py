import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import queue
import os
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from PIL import Image, ImageOps
import requests
import io
import time
from urllib.parse import urlparse
import re
from datetime import datetime
import zipfile
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter

class ImageNamingProcessor:
    """Class x·ª≠ l√Ω ƒë·∫∑t t√™n file ·∫£nh theo logic t·ª´ JavaScript"""
    
    def __init__(self):
        self.domain = "https://example.com/product/"
        self.image_base = "https://cdn.example.com/images/"
    
    def standardize(self, text):
        """Chu·∫©n h√≥a chu·ªói theo logic t·ª´ JavaScript"""
        if not text:
            return ""
        
        # Thay k√Ω t·ª± kh√¥ng h·ª£p l·ªá b·∫±ng '-'
        standardized = re.sub(r'[\\/:*?"<>|,=\s]', '-', text)
        
        # Lo·∫°i b·ªè g·∫°ch ngang tr√πng
        standardized = re.sub(r'-+', '-', standardized)
        
        # Ch·ªâ gi·ªØ l·∫°i a-z, A-Z, 0-9, -, _
        standardized = re.sub(r'[^a-zA-Z0-9\-_]', '', standardized)
        
        # Lo·∫°i b·ªè g·∫°ch ƒë·∫ßu/cu·ªëi
        standardized = re.sub(r'^-+|-+$', '', standardized)
        
        return standardized
    
    def process_product_code(self, code):
        """X·ª≠ l√Ω m√£ s·∫£n ph·∫©m ƒë·ªÉ t·∫°o slug v√† image name"""
        if not code:
            return "", "", False
        
        # Ki·ªÉm tra c√≥ add-on kit kh√¥ng
        had_addon_kit = bool(re.search(r'add[\s\-]*on[\s\-]*kit', code, re.IGNORECASE))
        
        # L√†m s·∫°ch chu·ªói, lo·∫°i b·ªè ghi ch√∫ coating, addon...
        clean_code = code
        clean_code = re.sub(r'\(with special coating\)', '', clean_code, flags=re.IGNORECASE)
        clean_code = re.sub(r'\[with special coating\]', '', clean_code, flags=re.IGNORECASE)
        clean_code = re.sub(r'add[\s\-]*on[\s\-]*kit', '', clean_code, flags=re.IGNORECASE)
        clean_code = clean_code.strip()
        
        # T·∫°o slug (lowercase) v√† image name (uppercase)
        slug = self.standardize(clean_code.lower())
        if had_addon_kit:
            slug += "-adk"
        
        image_name = self.standardize(clean_code.upper())
        
        return slug, image_name, had_addon_kit
    
    def generate_filename(self, code):
        """T·∫°o t√™n file ·∫£nh theo logic JavaScript"""
        slug, image_name, had_addon = self.process_product_code(code)
        return image_name + ".webp" if image_name else "unknown.webp"

class ImageCrawlerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Image Crawler - C√†o ·∫¢nh T·ª± ƒê·ªông")
        self.root.geometry("1000x700")
        self.root.configure(bg='#f0f0f0')
        
        # Kh·ªüi t·∫°o queue cho ƒëa lu·ªìng
        self.download_queue = queue.Queue()
        self.worker_threads = []
        self.max_workers = 5
        self.is_crawling = False
        
        # D·ªØ li·ªáu Excel ƒë·ªÉ mapping m√£ s·∫£n ph·∫©m
        self.excel_data = None
        self.product_codes = []  # List of all entries from Excel - no duplicate filtering
        
        # Result tracking system cho Excel reporting
        self.results = []  # Detailed results for each entry
        self.start_time = None
        self.output_dir = None
        
        # Kh·ªüi t·∫°o image naming processor
        self.naming_processor = ImageNamingProcessor()
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
        # Kh·ªüi ƒë·ªông worker threads
        self.start_worker_threads()
        
    def create_widgets(self):
        # Style cho giao di·ªán
        style = ttk.Style()
        style.theme_use('clam')
        
        # Frame ch√≠nh
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # C·∫•u h√¨nh grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # Ti√™u ƒë·ªÅ
        title_label = ttk.Label(main_frame, text="üñºÔ∏è IMAGE CRAWLER - X·ª¨ L√ù ·∫¢NH S·∫¢N PH·∫®M", 
                               font=('Arial', 16, 'bold'), foreground='#2c3e50')
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # Input section
        input_frame = ttk.LabelFrame(main_frame, text="Nh·∫≠p Link S·∫£n Ph·∫©m", padding="10")
        input_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        input_frame.columnconfigure(1, weight=1)
        
        # Radio buttons cho input type
        self.input_type = tk.StringVar(value="excel")
        ttk.Radiobutton(input_frame, text="File Excel (Khuy·∫øn ngh·ªã)", variable=self.input_type, 
                       value="excel", command=self.toggle_input_type).grid(row=0, column=0, sticky=tk.W)
        ttk.Radiobutton(input_frame, text="Danh s√°ch link", variable=self.input_type, 
                       value="list", command=self.toggle_input_type).grid(row=0, column=1, sticky=tk.W)
        
        # Text area cho links
        self.links_text = scrolledtext.ScrolledText(input_frame, height=6, width=60)
        self.links_text.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
        self.links_text.insert(tk.END, "Ch·ªçn file Excel ƒë·ªÉ import links v√† m√£ s·∫£n ph·∫©m...")
        self.links_text.config(state='disabled')
        
        # Browse button cho Excel
        self.browse_button = ttk.Button(input_frame, text="Ch·ªçn File Excel", 
                                       command=self.browse_excel)
        self.browse_button.grid(row=2, column=0, columnspan=3, pady=(10, 0))
        
        # Debug button
        self.debug_button = ttk.Button(input_frame, text="üîç Debug Excel", 
                                      command=self.debug_excel_info, state='disabled')
        self.debug_button.grid(row=3, column=0, columnspan=3, pady=(5, 0))
        
        # C·∫•u h√¨nh crawler
        config_frame = ttk.LabelFrame(main_frame, text="C·∫•u H√¨nh X·ª≠ L√Ω ·∫¢nh", padding="10")
        config_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        config_frame.columnconfigure(1, weight=1)
        
        ttk.Label(config_frame, text="S·ªë lu·ªìng x·ª≠ l√Ω:").grid(row=0, column=0, sticky=tk.W)
        self.thread_count = tk.StringVar(value="5")
        thread_spinbox = ttk.Spinbox(config_frame, from_=1, to=10, textvariable=self.thread_count, width=10)
        thread_spinbox.grid(row=0, column=1, sticky=tk.W, padx=(10, 0))
        
        ttk.Label(config_frame, text="Th∆∞ m·ª•c l∆∞u:").grid(row=1, column=0, sticky=tk.W, pady=(10, 0))
        self.save_path = tk.StringVar(value="./downloaded_images")
        path_entry = ttk.Entry(config_frame, textvariable=self.save_path, width=50)
        path_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=(10, 0))
        ttk.Button(config_frame, text="Ch·ªçn", command=self.browse_folder).grid(row=1, column=2, padx=(10, 0), pady=(10, 0))
        
        # X·ª≠ l√Ω ·∫£nh s·∫£n ph·∫©m
        ttk.Label(config_frame, text="X·ª≠ l√Ω ·∫£nh:").grid(row=2, column=0, sticky=tk.W, pady=(10, 0))
        self.image_processing = tk.StringVar(value="product")
        process_frame = ttk.Frame(config_frame)
        process_frame.grid(row=2, column=1, sticky=tk.W, padx=(10, 0), pady=(10, 0))
        ttk.Radiobutton(process_frame, text="·∫¢nh s·∫£n ph·∫©m (c√≥ n·ªÅn tr·∫Øng)", variable=self.image_processing, 
                       value="product").pack(side=tk.LEFT, padx=(0, 10))
        ttk.Radiobutton(process_frame, text="·∫¢nh th∆∞·ªùng", variable=self.image_processing, 
                       value="normal").pack(side=tk.LEFT)
        
        # Crawl mode
        ttk.Label(config_frame, text="Ch·∫ø ƒë·ªô crawl:").grid(row=3, column=0, sticky=tk.W, pady=(10, 0))
        self.crawl_mode = tk.StringVar(value="direct")
        crawl_frame = ttk.Frame(config_frame)
        crawl_frame.grid(row=3, column=1, sticky=tk.W, padx=(10, 0), pady=(10, 0))
        ttk.Radiobutton(crawl_frame, text="Link ·∫£nh tr·ª±c ti·∫øp", variable=self.crawl_mode, 
                       value="direct").pack(side=tk.LEFT, padx=(0, 10))
        ttk.Radiobutton(crawl_frame, text="Crawl t·ª´ trang web", variable=self.crawl_mode, 
                       value="webpage").pack(side=tk.LEFT)
        
        # Control buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=3, pady=20)
        
        self.start_button = ttk.Button(button_frame, text="üöÄ B·∫Øt ƒê·∫ßu Crawl", 
                                       command=self.start_crawling, style='Accent.TButton')
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(button_frame, text="‚èπÔ∏è D·ª´ng", 
                                     command=self.stop_crawling, state='disabled')
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
                # Test button
        self.test_button = ttk.Button(button_frame, text="üß™ Test v·ªõi Links M·∫´u", 
                                      command=self.load_test_links)
        self.test_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # Test naming button
        self.test_naming_button = ttk.Button(button_frame, text="üìù Test ƒê·∫∑t T√™n", 
                                            command=self.test_naming_logic)
        self.test_naming_button.pack(side=tk.LEFT)
        
        # Progress section
        progress_frame = ttk.LabelFrame(main_frame, text="Ti·∫øn Tr√¨nh", padding="10")
        progress_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        progress_frame.columnconfigure(0, weight=1)
        progress_frame.rowconfigure(2, weight=1)
        
        # Progress bar
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, maximum=100)
        self.progress_bar.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Status label
        self.status_label = ttk.Label(progress_frame, text="S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu...")
        self.status_label.grid(row=1, column=0, sticky=tk.W, pady=(0, 10))
        
        # Log area
        self.log_text = scrolledtext.ScrolledText(progress_frame, height=10, width=80)
        self.log_text.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Stats
        stats_frame = ttk.Frame(progress_frame)
        stats_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        
        self.total_links_label = ttk.Label(stats_frame, text="T·ªïng link: 0")
        self.total_links_label.pack(side=tk.LEFT, padx=(0, 20))
        
        self.processed_label = ttk.Label(stats_frame, text="ƒê√£ x·ª≠ l√Ω: 0")
        self.processed_label.pack(side=tk.LEFT, padx=(0, 20))
        
        self.success_label = ttk.Label(stats_frame, text="Th√†nh c√¥ng: 0")
        self.success_label.pack(side=tk.LEFT, padx=(0, 20))
        
        self.failed_label = ttk.Label(stats_frame, text="Th·∫•t b·∫°i: 0")
        self.failed_label.pack(side=tk.LEFT)
        
        # C·∫•u h√¨nh grid weights
        main_frame.rowconfigure(4, weight=1)
        
    def toggle_input_type(self):
        if self.input_type.get() == "list":
            self.links_text.config(state='normal')
            self.browse_button.config(state='disabled')
            self.links_text.delete(1.0, tk.END)
            self.links_text.insert(tk.END, "Nh·∫≠p c√°c link s·∫£n ph·∫©m, m·ªói link m·ªôt d√≤ng...")
        else:
            self.links_text.config(state='disabled')
            self.browse_button.config(state='normal')
            self.links_text.delete(1.0, tk.END)
            self.links_text.insert(tk.END, "Ch·ªçn file Excel ƒë·ªÉ import links v√† m√£ s·∫£n ph·∫©m...")
    
    def load_test_links(self):
        """Load test links t·ª´ file test_links.txt"""
        try:
            if os.path.exists("test_links.txt"):
                with open("test_links.txt", "r", encoding="utf-8") as f:
                    test_links = f.read()
                
                self.input_type.set("list")
                self.toggle_input_type()
                self.links_text.delete(1.0, tk.END)
                self.links_text.insert(tk.END, test_links)
                self.log_message("ƒê√£ load test links th√†nh c√¥ng!")
            else:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y file test_links.txt")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ load test links: {str(e)}")
    
    def test_naming_logic(self):
        """Test logic ƒë·∫∑t t√™n file ·∫£nh theo JavaScript"""
        test_codes = [
            "FR-1H-220V",
            "TC-NT-20R (with special coating)",
            "ETC-48 Add-on Kit",
            "FR-2H-380V [with special coating]",
            "TC-NT-30R ADD ON KIT",
            "ETC-60",
            "FR-3H-440V"
        ]
        
        self.log_message("üß™ TEST LOGIC ƒê·∫∂T T√äN FILE ·∫¢NH")
        self.log_message("=" * 50)
        
        for code in test_codes:
            filename = self.naming_processor.generate_filename(code)
            slug, image_name, had_addon = self.naming_processor.process_product_code(code)
            
            self.log_message(f"üìã M√£ g·ªëc: {code}")
            self.log_message(f"üßπ M√£ s·∫°ch: {slug}")
            self.log_message(f"üñºÔ∏è T√™n ·∫£nh: {image_name}")
            self.log_message(f"üì¶ Add-on kit: {had_addon}")
            self.log_message(f"üìÑ Filename: {filename}")
            self.log_message("-" * 30)
        
        self.log_message("‚úÖ Ho√†n th√†nh test logic ƒë·∫∑t t√™n!")
        messagebox.showinfo("Test Ho√†n Th√†nh", "ƒê√£ test logic ƒë·∫∑t t√™n file ·∫£nh!\nXem log ƒë·ªÉ bi·∫øt chi ti·∫øt.")
    
    def browse_excel(self):
        filename = filedialog.askopenfilename(
            title="Ch·ªçn File Excel",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        if filename:
            try:
                # ƒê·ªçc file Excel v·ªõi nhi·ªÅu c√°ch kh√°c nhau ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫≠n ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu
                try:
                    # Th·ª≠ ƒë·ªçc b√¨nh th∆∞·ªùng tr∆∞·ªõc
                    df = pd.read_excel(filename)
                    self.log_message(f"ƒê·ªçc b√¨nh th∆∞·ªùng: {len(df)} d√≤ng")
                except:
                    df = pd.read_excel(filename, header=None)
                    self.log_message(f"ƒê·ªçc kh√¥ng header: {len(df)} d√≤ng")
                
                # Th·ª≠ ƒë·ªçc v·ªõi header=None ƒë·ªÉ so s√°nh
                try:
                    df_no_header = pd.read_excel(filename, header=None)
                    if len(df_no_header) > len(df):
                        df = df_no_header
                        self.log_message(f"Chuy·ªÉn sang ƒë·ªçc kh√¥ng header: {len(df)} d√≤ng")
                except:
                    pass
                
                # L∆∞u d·ªØ li·ªáu ƒë·ªÉ debug
                self.last_excel_data = df
                
                # Hi·ªÉn th·ªã th√¥ng tin file
                self.log_message(f"üìä Th√¥ng tin file Excel: {filename}")
                self.log_message(f"üìã T·ªïng s·ªë c·ªôt: {len(df.columns)}")
                self.log_message(f"üìù T·ªïng s·ªë d√≤ng: {len(df)}")
                
                # Ki·ªÉm tra c·∫•u tr√∫c file
                if len(df.columns) < 2:
                    messagebox.showerror("L·ªói", "File Excel ph·∫£i c√≥ √≠t nh·∫•t 2 c·ªôt:\nC·ªôt A: M√£ s·∫£n ph·∫©m\nC·ªôt B: Link ·∫£nh")
                    return
                
                # L·∫•y c·ªôt A (m√£ s·∫£n ph·∫©m) v√† c·ªôt B (link)
                product_codes = df.iloc[:, 0].tolist()
                links = df.iloc[:, 1].tolist()
                
                # Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc
                self.log_message(f"üìã D·ªØ li·ªáu g·ªëc t·ª´ Excel:")
                for i, (code, link) in enumerate(zip(product_codes, links)):
                    self.log_message(f"   D√≤ng {i+1}: M√£='{code}' | Link='{link}'")
                
                # T·∫°o list entries (LOGIC ƒê∆†N GI·∫¢N - KH√îNG PH√ÇN BI·ªÜT DUPLICATE)
                self.product_codes = []
                valid_count = 0
                skipped_count = 0
                
                self.log_message(f"üîß B·∫ÆT ƒê·∫¶U X·ª¨ L√ù {len(product_codes)} D√íNG D·ªÆ LI·ªÜU")
                
                for i, (code, link) in enumerate(zip(product_codes, links)):
                    # Ki·ªÉm tra v√† x·ª≠ l√Ω d·ªØ li·ªáu
                    code_str = str(code).strip() if pd.notna(code) else ""
                    link_str = str(link).strip() if pd.notna(link) else ""
                    
                    # Debug chi ti·∫øt t·ª´ng d√≤ng
                    self.log_message(f"üîç D√≤ng {i+1}: M√£='{code_str}' | Link='{link_str}'")
                    
                    # LOGIC ƒê∆†N GI·∫¢N: Ch·ªâ b·ªè qua d√≤ng ho√†n to√†n tr·ªëng
                    if not code_str and not link_str:
                        self.log_message(f"‚ö†Ô∏è B·ªè qua d√≤ng {i+1}: D√≤ng tr·ªëng ho√†n to√†n")
                        skipped_count += 1
                        continue
                    
                    # N·∫øu c√≥ link nh∆∞ng kh√¥ng c√≥ m√£, t·ª± t·∫°o m√£
                    if link_str and not code_str:
                        code_str = f"PRODUCT_{i+1:03d}"
                        self.log_message(f"‚ö†Ô∏è D√≤ng {i+1}: T·ª± t·∫°o m√£ '{code_str}' cho link")
                    
                    # N·∫øu c√≥ m√£ nh∆∞ng kh√¥ng c√≥ link, t·ª± t·∫°o link
                    if code_str and not link_str:
                        link_str = f"https://example.com/product/{code_str}"
                        self.log_message(f"‚ö†Ô∏è D√≤ng {i+1}: T·ª± t·∫°o link cho m√£ '{code_str}'")
                    
                    # TH√äM T·∫§T C·∫¢ ENTRIES V√ÄO LIST (KH√îNG PH√ÇN BI·ªÜT DUPLICATE)
                    if link_str and code_str:
                        # T·∫°o entry object ƒë∆°n gi·∫£n
                        entry = {
                            'code': code_str,
                            'link': link_str,
                            'row': i + 1
                        }
                        
                        # Th√™m v√†o list - kh√¥ng ki·ªÉm tra duplicate
                        self.product_codes.append(entry)
                        valid_count += 1
                        self.log_message(f"‚úÖ D√≤ng {i+1}: M√£='{code_str}' | Link='{link_str}' | Entry #{len(self.product_codes)}")
                    else:
                        self.log_message(f"‚ö†Ô∏è D√≤ng {i+1}: Thi·∫øu th√¥ng tin")
                        skipped_count += 1
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                total_entries = len(self.product_codes)
                
                self.log_message(f"üìä K·∫øt qu·∫£ x·ª≠ l√Ω Excel:")
                self.log_message(f"   ‚úÖ T·ªïng entries: {total_entries}")
                self.log_message(f"   ‚ö†Ô∏è B·ªè qua: {skipped_count} d√≤ng")
                self.log_message(f"   üìã T·ªïng c·ªông: {len(df)} d√≤ng")
                
                # Hi·ªÉn th·ªã trong text area (LOGIC ƒê∆†N GI·∫¢N)
                self.links_text.config(state='normal')
                self.links_text.delete(1.0, tk.END)
                
                # Hi·ªÉn th·ªã t·∫•t c·∫£ entries
                for idx, entry in enumerate(self.product_codes):
                    self.links_text.insert(tk.END, f"{entry['code']}\t{entry['link']}\n")
                
                self.links_text.config(state='disabled')
                
                self.log_message(f"üéØ ƒê√£ import {total_entries} entries t·ª´ file Excel")
                self.log_message(f"üìã C·ªôt A: M√£ s·∫£n ph·∫©m, C·ªôt B: Link ·∫£nh")
                
                # K√≠ch ho·∫°t n√∫t debug
                self.debug_button.config(state='normal')
                
                # Hi·ªÉn th·ªã th√¥ng b√°o ƒë∆°n gi·∫£n
                if total_entries > 0:
                    messagebox.showinfo("Th√†nh c√¥ng", 
                        f"ƒê√£ import th√†nh c√¥ng {total_entries} entries!\n\n"
                        f"üìä Th·ªëng k√™:\n"
                        f"- T·ªïng d√≤ng Excel: {len(df)}\n"
                        f"- Entries h·ª£p l·ªá: {total_entries}\n"
                        f"- D√≤ng b·ªè qua: {skipped_count}\n\n"
                        f"App s·∫Ω x·ª≠ l√Ω t·∫•t c·∫£ {total_entries} entries!")
                else:
                    messagebox.showwarning("C·∫£nh b√°o", 
                        f"Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá n√†o ƒë∆∞·ª£c t√¨m th·∫•y!\n\n"
                        f"T·ªïng d√≤ng Excel: {len(df)}\n"
                        f"D√≤ng b·ªè qua: {skipped_count}\n\n"
                        f"Vui l√≤ng ki·ªÉm tra c·∫•u tr√∫c file Excel.")
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file Excel: {str(e)}")
                self.log_message(f"‚ùå L·ªói khi ƒë·ªçc Excel: {str(e)}")
    
    def debug_excel_info(self):
        """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ file Excel ƒë√£ import"""
        if not hasattr(self, 'last_excel_data') or self.last_excel_data is None:
            messagebox.showinfo("Th√¥ng tin", "Ch∆∞a c√≥ file Excel n√†o ƒë∆∞·ª£c import!")
            return
        
        try:
            df = self.last_excel_data
            
            # T·∫°o th√¥ng tin debug
            debug_info = f"üîç TH√îNG TIN DEBUG FILE EXCEL\n"
            debug_info += f"{'='*50}\n\n"
            debug_info += f"üìä Th√¥ng tin chung:\n"
            debug_info += f"   - T·ªïng s·ªë c·ªôt: {len(df.columns)}\n"
            debug_info += f"   - T·ªïng s·ªë d√≤ng: {len(df)}\n"
            debug_info += f"   - T√™n c·ªôt: {list(df.columns)}\n\n"
            
            debug_info += f"üìã D·ªØ li·ªáu chi ti·∫øt:\n"
            for i in range(len(df)):
                col_a = df.iloc[i, 0] if len(df.columns) > 0 else "N/A"
                col_b = df.iloc[i, 1] if len(df.columns) > 1 else "N/A"
                
                col_a_str = str(col_a) if pd.notna(col_a) else "TR·ªêNG"
                col_b_str = str(col_b) if pd.notna(col_b) else "TR·ªêNG"
                
                debug_info += f"   D√≤ng {i+1:2d}: | {col_a_str:<20} | {col_b_str}\n"
            
            debug_info += f"\nüéØ K·∫øt qu·∫£ x·ª≠ l√Ω:\n"
            total_entries = len(self.product_codes)
            
            debug_info += f"   - T·ªïng entries: {total_entries}\n"
            debug_info += f"   - Mapping chi ti·∫øt:\n"
            
            for idx, entry in enumerate(self.product_codes):
                debug_info += f"     {idx+1:2d}. {entry['code']} (row {entry['row']}) -> {entry['link']}\n"
            
            # Hi·ªÉn th·ªã trong dialog
            self.show_debug_dialog(debug_info)
            
        except Exception as e:
            messagebox.showerror("L·ªói Debug", f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã th√¥ng tin debug: {str(e)}")
    
    def show_debug_dialog(self, debug_info):
        """Hi·ªÉn th·ªã dialog debug v·ªõi th√¥ng tin chi ti·∫øt"""
        debug_window = tk.Toplevel(self.root)
        debug_window.title("üîç Debug Excel Info")
        debug_window.geometry("800x600")
        debug_window.configure(bg='#f0f0f0')
        
        # Frame ch√≠nh
        main_frame = ttk.Frame(debug_window, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Ti√™u ƒë·ªÅ
        title_label = ttk.Label(main_frame, text="üîç TH√îNG TIN DEBUG FILE EXCEL", 
                               font=('Arial', 14, 'bold'))
        title_label.pack(pady=(0, 10))
        
        # Text area cho debug info
        debug_text = scrolledtext.ScrolledText(main_frame, height=25, width=90, font=('Consolas', 10))
        debug_text.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        debug_text.insert(tk.END, debug_info)
        debug_text.config(state='disabled')
        
        # N√∫t ƒë√≥ng
        close_button = ttk.Button(main_frame, text="ƒê√≥ng", command=debug_window.destroy)
        close_button.pack()
        
        # Focus v√†o window
        debug_window.focus_set()
        debug_window.grab_set()  # Modal window
    
    def browse_folder(self):
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh")
        if folder:
            self.save_path.set(folder)
    
    def start_worker_threads(self):
        for i in range(self.max_workers):
            worker = threading.Thread(target=self.worker_function, daemon=True)
            worker.start()
            self.worker_threads.append(worker)
    
    def worker_function(self):
        while True:
            try:
                task = self.download_queue.get(timeout=1)
                if task is None:
                    break
                
                # Handle both old 3-param and new 4-param format for backward compatibility
                if len(task) == 4:
                    link, save_dir, product_code, row_number = task
                else:
                    link, save_dir, product_code = task
                    row_number = None
                self.process_single_link(link, save_dir, product_code, row_number)
                self.download_queue.task_done()
                
            except queue.Empty:
                continue
            except Exception as e:
                self.log_message(f"L·ªói worker thread: {str(e)}")
    
    def start_crawling(self):
        if self.is_crawling:
            return
        
        # L·∫•y entries ho·∫∑c links
        if self.input_type.get() == "excel":
            if not self.product_codes:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn file Excel tr∆∞·ªõc!")
                return
            # S·ª≠ d·ª•ng entries thay v√¨ links ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£
            entries = self.product_codes
        else:
            links_text = self.links_text.get(1.0, tk.END).strip()
            if not links_text or links_text == "Nh·∫≠p c√°c link s·∫£n ph·∫©m, m·ªói link m·ªôt d√≤ng...":
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt link!")
                return
            links = [link.strip() for link in links_text.split('\n') if link.strip() and not link.startswith('#')]
            # Convert links to entries format
            entries = [{'code': f'manual_{i+1}', 'link': link, 'row': i+1} for i, link in enumerate(links)]
        
        if not entries:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ entry h·ª£p l·ªá n√†o!")
            return
        
        # T·∫°o th∆∞ m·ª•c l∆∞u
        save_dir = self.save_path.get()
        os.makedirs(save_dir, exist_ok=True)
        
        # C·∫≠p nh·∫≠t UI
        self.is_crawling = True
        self.start_button.config(state='disabled')
        self.stop_button.config(state='normal')
        self.progress_var.set(0)
        
        # Reset stats v√† kh·ªüi t·∫°o tracking
        self.total_links = len(entries)
        self.processed_count = 0
        self.success_count = 0
        self.failed_count = 0
        self.results = []  # Reset results tracking
        self.start_time = time.time()  # Set start time for reporting
        self.output_dir = save_dir  # Store output directory
        
        self.update_stats()
        self.log_message(f"B·∫Øt ƒë·∫ßu crawl {len(entries)} entries...")
        
        # B·∫Øt ƒë·∫ßu crawl trong thread ri√™ng - truy·ªÅn entries thay v√¨ links
        crawl_thread = threading.Thread(target=self.crawl_entries, args=(entries, save_dir))
        crawl_thread.start()
    
    def crawl_entries(self, entries, save_dir):
        try:
            if self.crawl_mode.get() == "direct":
                # Ch·∫ø ƒë·ªô link ·∫£nh tr·ª±c ti·∫øp
                self.log_message("Ch·∫ø ƒë·ªô: Link ·∫£nh tr·ª±c ti·∫øp")
                for i, entry in enumerate(entries):
                    if not self.is_crawling:
                        break
                    
                    try:
                        link = entry['link']
                        product_code = entry['code']
                        row = entry['row']
                        
                        self.log_message(f"ƒêang x·ª≠ l√Ω entry {i+1}/{len(entries)}: {product_code} -> {link} (row {row})")
                        
                        # Th√™m v√†o queue download - X·ª¨ L√ù T·ª™NG ENTRY
                        self.download_queue.put((link, save_dir, product_code, row))
                        self.log_message(f"Entry ƒë∆∞·ª£c th√™m v√†o queue: {product_code} -> {link}")
                        
                        # C·∫≠p nh·∫≠t progress
                        progress = ((i + 1) / len(entries)) * 100
                        self.root.after(0, lambda p=progress: self.progress_var.set(p))
                        
                    except Exception as e:
                        self.log_message(f"L·ªói khi x·ª≠ l√Ω entry {entry}: {str(e)}")
                        self.failed_count += 1
                    
                    self.processed_count += 1
                    self.update_stats()
            else:
                # Ch·∫ø ƒë·ªô crawl t·ª´ trang web
                self.log_message("Ch·∫ø ƒë·ªô: Crawl t·ª´ trang web")
                service = Service(ChromeDriverManager().install())
                options = webdriver.ChromeOptions()
                options.add_argument('--headless')
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage')
                
                driver = webdriver.Chrome(service=service, options=options)
                
                for i, entry in enumerate(entries):
                    if not self.is_crawling:
                        break
                    
                    try:
                        link = entry['link']
                        product_code = entry['code']
                        row = entry['row']
                        
                        self.log_message(f"ƒêang x·ª≠ l√Ω entry {i+1}/{len(entries)}: {product_code} -> {link} (row {row})")
                        
                        # Crawl ·∫£nh t·ª´ link
                        images = self.crawl_images_from_link(driver, link)
                        
                        if images:
                            # Th√™m v√†o queue download
                            for img_url in images:
                                self.download_queue.put((img_url, save_dir, product_code, row))
                            
                            self.log_message(f"T√¨m th·∫•y {len(images)} ·∫£nh t·ª´ entry: {product_code}")
                        else:
                            self.log_message(f"Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o t·ª´ entry: {product_code}")
                        
                        # C·∫≠p nh·∫≠t progress
                        progress = ((i + 1) / len(entries)) * 100
                        self.root.after(0, lambda p=progress: self.progress_var.set(p))
                        
                    except Exception as e:
                        self.log_message(f"L·ªói khi x·ª≠ l√Ω entry {entry}: {str(e)}")
                        self.failed_count += 1
                    
                    self.processed_count += 1
                    self.update_stats()
                
                driver.quit()
            
            # Ch·ªù t·∫•t c·∫£ download ho√†n th√†nh
            self.download_queue.join()
            
            self.root.after(0, self.crawling_finished)
            
        except Exception as e:
            self.log_message(f"L·ªói trong qu√° tr√¨nh crawl: {str(e)}")
            self.root.after(0, self.crawling_finished)
    
    def crawl_images_from_link(self, driver, link):
        try:
            driver.get(link)
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "img"))
            )
            
            # T√¨m t·∫•t c·∫£ ·∫£nh
            images = driver.find_elements(By.TAG_NAME, "img")
            image_urls = []
            
            for img in images:
                src = img.get_attribute('src')
                if src and self.is_valid_image_url(src):
                    image_urls.append(src)
            
            return image_urls
            
        except Exception as e:
            self.log_message(f"L·ªói khi crawl link {link}: {str(e)}")
            return []
    
    def is_valid_image_url(self, url):
        if not url:
            return False
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i l√† URL kh√¥ng
        if not url.startswith(('http://', 'https://')):
            return False
        
        # Ki·ªÉm tra extension
        valid_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.JPG', '.JPEG', '.PNG', '.GIF', '.BMP', '.WEBP']
        parsed_url = urlparse(url)
        path = parsed_url.path.lower()
        
        # Ki·ªÉm tra extension trong path
        has_valid_extension = any(path.endswith(ext.lower()) for ext in valid_extensions)
        
        # Ki·ªÉm tra query parameters c√≥ ch·ª©a extension
        query_has_extension = any(ext.lower() in parsed_url.query.lower() for ext in valid_extensions)
        
        # Ki·ªÉm tra fragment c√≥ ch·ª©a extension
        fragment_has_extension = any(ext.lower() in parsed_url.fragment.lower() for ext in valid_extensions)
        
        # N·∫øu c√≥ extension ·ªü b·∫•t k·ª≥ ƒë√¢u, coi nh∆∞ h·ª£p l·ªá
        if has_valid_extension or query_has_extension or fragment_has_extension:
            return True
        
        # Ki·ªÉm tra m·ªôt s·ªë pattern ƒë·∫∑c bi·ªát
        special_patterns = [
            'cdn', 'images', 'img', 'photo', 'picture', 'upload', 'media',
            'static', 'assets', 'content', 'files', 'storage'
        ]
        
        url_lower = url.lower()
        has_special_pattern = any(pattern in url_lower for pattern in special_patterns)
        
        # N·∫øu c√≥ pattern ƒë·∫∑c bi·ªát, coi nh∆∞ h·ª£p l·ªá
        if has_special_pattern:
            return True
        
        return False
    
    def process_single_link(self, img_url, save_dir, product_code, row_number=None):
        # Initialize result tracking
        start_time = time.time()
        result_entry = {
            'product_code': product_code,
            'link': img_url, 
            'row': row_number,
            'status': 'failed',
            'filename': None,
            'file_size': None,
            'error_reason': None,
            'download_time': None,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        try:
            # Ki·ªÉm tra xem c√≥ ph·∫£i link ·∫£nh tr·ª±c ti·∫øp kh√¥ng
            if self.is_valid_image_url(img_url):
                # Download ·∫£nh tr·ª±c ti·∫øp
                self.log_message(f"üñºÔ∏è Download ·∫£nh tr·ª±c ti·∫øp: {img_url}")
                
                try:
                    # Enhanced headers ƒë·ªÉ bypass 403 Forbidden
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                        'Referer': 'https://www.fotekexpress.com/',
                        'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.9',
                        'Accept-Encoding': 'gzip, deflate, br',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1',
                    }
                    response = requests.get(img_url, headers=headers, timeout=30)
                    response.raise_for_status()
                    
                    # X·ª≠ l√Ω ·∫£nh
                    img = Image.open(io.BytesIO(response.content))
                    
                    if self.image_processing.get() == "product":
                        # X·ª≠ l√Ω ·∫£nh s·∫£n ph·∫©m: ch√®n n·ªÅn tr·∫Øng
                        img = self.process_product_image(img)
                    
                    # Convert RGBA sang RGB n·∫øu c·∫ßn
                    if img.mode in ('RGBA', 'LA', 'P'):
                        img = img.convert('RGB')
                    
                    # T·∫°o t√™n file theo m√£ s·∫£n ph·∫©m
                    filename = self.generate_filename(product_code)
                    filepath = os.path.join(save_dir, filename)
                    
                    # L∆∞u d∆∞·ªõi d·∫°ng WebP
                    img.save(filepath, 'WEBP', quality=85, optimize=True)
                    
                    # L·∫•y file size
                    file_size = os.path.getsize(filepath)
                    
                    # Update result entry for success
                    result_entry.update({
                        'status': 'success',
                        'filename': filename,
                        'file_size': file_size,
                        'download_time': time.time() - start_time
                    })
                    
                    self.success_count += 1
                    self.log_message(f"‚úÖ ƒê√£ l∆∞u ·∫£nh: {filename} (M√£: {product_code}) - {file_size/1024:.1f}KB")
                    
                except requests.exceptions.Timeout:
                    result_entry['error_reason'] = "Timeout - Link kh√¥ng ph·∫£n h·ªìi trong 30s"
                    self.failed_count += 1
                    self.log_message(f"‚ùå Timeout khi download: {img_url}")
                    
                except requests.exceptions.HTTPError as e:
                    result_entry['error_reason'] = f"HTTP Error {e.response.status_code}: {e.response.reason}"
                    self.failed_count += 1
                    self.log_message(f"‚ùå HTTP Error {e.response.status_code}: {img_url}")
                    
                except requests.exceptions.RequestException as e:
                    result_entry['error_reason'] = f"Network Error: {str(e)}"
                    self.failed_count += 1
                    self.log_message(f"‚ùå Network Error: {img_url}")
                    
                except Exception as e:
                    result_entry['error_reason'] = f"Image Processing Error: {str(e)}"
                    self.failed_count += 1
                    self.log_message(f"‚ùå Image Error: {img_url} - {str(e)}")
                
            else:
                # Link kh√¥ng ph·∫£i ·∫£nh tr·ª±c ti·∫øp - th·ª≠ crawl t·ª´ trang web
                self.log_message(f"üåê Th·ª≠ crawl t·ª´ trang web: {img_url}")
                try:
                    # S·ª≠ d·ª•ng Selenium ƒë·ªÉ crawl
                    service = Service(ChromeDriverManager().install())
                    options = webdriver.ChromeOptions()
                    options.add_argument('--headless')
                    options.add_argument('--no-sandbox')
                    options.add_argument('--disable-dev-shm-usage')
                    
                    driver = webdriver.Chrome(service=service, options=options)
                    
                    # Crawl ·∫£nh t·ª´ trang web
                    images = self.crawl_images_from_link(driver, img_url)
                    
                    if images:
                        # L∆∞u ·∫£nh ƒë·∫ßu ti√™n t√¨m ƒë∆∞·ª£c
                        img_url_direct = images[0]
                        self.log_message(f"üñºÔ∏è T√¨m th·∫•y ·∫£nh: {img_url_direct}")
                        
                        # Download ·∫£nh v·ªõi enhanced headers
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                            'Referer': 'https://www.fotekexpress.com/',
                            'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
                            'Accept-Language': 'en-US,en;q=0.9',
                            'Accept-Encoding': 'gzip, deflate, br',
                            'Connection': 'keep-alive',
                            'Upgrade-Insecure-Requests': '1',
                        }
                        response = requests.get(img_url_direct, headers=headers, timeout=30)
                        response.raise_for_status()
                        
                        # X·ª≠ l√Ω ·∫£nh
                        img = Image.open(io.BytesIO(response.content))
                        
                        if self.image_processing.get() == "product":
                            # X·ª≠ l√Ω ·∫£nh s·∫£n ph·∫©m: ch√®n n·ªÅn tr·∫Øng
                            img = self.process_product_image(img)
                        
                        # Convert RGBA sang RGB n·∫øu c·∫ßn
                        if img.mode in ('RGBA', 'LA', 'P'):
                            img = img.convert('RGB')
                        
                        # T·∫°o t√™n file theo m√£ s·∫£n ph·∫©m
                        filename = self.generate_filename(product_code)
                        filepath = os.path.join(save_dir, filename)
                        
                        # L∆∞u d∆∞·ªõi d·∫°ng WebP
                        img.save(filepath, 'WEBP', quality=85, optimize=True)
                        
                        # L·∫•y file size
                        file_size = os.path.getsize(filepath)
                        
                        # Update result entry for success
                        result_entry.update({
                            'status': 'success',
                            'filename': filename,
                            'file_size': file_size,
                            'download_time': time.time() - start_time
                        })
                        
                        self.success_count += 1
                        self.log_message(f"‚úÖ ƒê√£ l∆∞u ·∫£nh t·ª´ trang web: {filename} (M√£: {product_code}) - {file_size/1024:.1f}KB")
                    else:
                        result_entry['error_reason'] = "Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o tr√™n trang web"
                        self.log_message(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o t·ª´ trang web: {img_url}")
                        self.failed_count += 1
                    
                    driver.quit()
                    
                except Exception as e:
                    result_entry['error_reason'] = f"Web Crawl Error: {str(e)}"
                    self.log_message(f"‚ùå L·ªói khi crawl t·ª´ trang web {img_url}: {str(e)}")
                    self.failed_count += 1
            
        except Exception as e:
            result_entry['error_reason'] = f"General Error: {str(e)}"
            self.failed_count += 1
            self.log_message(f"‚ùå L·ªói khi x·ª≠ l√Ω link {img_url}: {str(e)}")
        
        finally:
            # Ensure download time is set
            if result_entry['download_time'] is None:
                result_entry['download_time'] = time.time() - start_time
            
            # Add result to tracking list
            self.results.append(result_entry)
            self.update_stats()
    
    def process_product_image(self, img):
        """X·ª≠ l√Ω ·∫£nh s·∫£n ph·∫©m: ch√®n n·ªÅn tr·∫Øng v√† gi·ªØ nguy√™n k√≠ch th∆∞·ªõc"""
        try:
            # L·∫•y k√≠ch th∆∞·ªõc g·ªëc
            original_width, original_height = img.size
            
            # T·∫°o ·∫£nh n·ªÅn tr·∫Øng v·ªõi k√≠ch th∆∞·ªõc g·ªëc
            white_bg = Image.new('RGB', (original_width, original_height), (255, 255, 255))
            
            # Convert ·∫£nh g·ªëc sang RGBA n·∫øu c·∫ßn
            if img.mode != 'RGBA':
                img = img.convert('RGBA')
            
            # Paste ·∫£nh g·ªëc l√™n n·ªÅn tr·∫Øng
            white_bg.paste(img, (0, 0), img)
            
            return white_bg
            
        except Exception as e:
            self.log_message(f"L·ªói khi x·ª≠ l√Ω ·∫£nh s·∫£n ph·∫©m: {str(e)}")
            return img  # Tr·∫£ v·ªÅ ·∫£nh g·ªëc n·∫øu c√≥ l·ªói
    
    def generate_filename(self, product_code):
        """T·∫°o t√™n file theo logic JavaScript"""
        return self.naming_processor.generate_filename(str(product_code))
    
    def generate_excel_report(self, output_dir):
        """T·∫°o Excel report v·ªõi color coding cho results"""
        try:
            self.log_message("üìä ƒêang t·∫°o Excel report...")
            
            # T·∫°o workbook
            wb = Workbook()
            
            # Remove default sheet
            wb.remove(wb.active)
            
            # === SHEET 1: DETAILED RESULTS ===
            details_ws = wb.create_sheet("Chi Ti·∫øt K·∫øt Qu·∫£")
            
            # Headers
            headers = [
                'STT', 'M√£ S·∫£n Ph·∫©m', 'Link', 'Tr·∫°ng Th√°i', 'T√™n File', 
                'K√≠ch Th∆∞·ªõc (KB)', 'L√Ω Do L·ªói', 'Th·ªùi Gian DL (s)', 'Row Excel', 'Timestamp'
            ]
            
            # Style definitions
            header_font = Font(bold=True, color="FFFFFF")
            header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
            success_fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
            failed_fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")
            border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
            center_alignment = Alignment(horizontal='center', vertical='center')
            
            # Add headers
            for col, header in enumerate(headers, 1):
                cell = details_ws.cell(row=1, column=col, value=header)
                cell.font = header_font
                cell.fill = header_fill
                cell.border = border
                cell.alignment = center_alignment
            
            # Add data rows
            for idx, result in enumerate(self.results, 2):
                # STT
                details_ws.cell(row=idx, column=1, value=idx-1)
                
                # M√£ S·∫£n Ph·∫©m
                details_ws.cell(row=idx, column=2, value=result['product_code'])
                
                # Link
                details_ws.cell(row=idx, column=3, value=result['link'])
                
                # Tr·∫°ng Th√°i
                status_cell = details_ws.cell(row=idx, column=4, value=result['status'].upper())
                status_cell.font = Font(bold=True)
                
                # T√™n File
                details_ws.cell(row=idx, column=5, value=result['filename'] or 'N/A')
                
                # K√≠ch Th∆∞·ªõc
                if result['file_size']:
                    size_kb = round(result['file_size'] / 1024, 1)
                    details_ws.cell(row=idx, column=6, value=size_kb)
                else:
                    details_ws.cell(row=idx, column=6, value='N/A')
                
                # L√Ω Do L·ªói
                details_ws.cell(row=idx, column=7, value=result['error_reason'] or 'N/A')
                
                # Th·ªùi Gian Download
                if result['download_time']:
                    dl_time = round(result['download_time'], 2)
                    details_ws.cell(row=idx, column=8, value=dl_time)
                else:
                    details_ws.cell(row=idx, column=8, value='N/A')
                
                # Row Excel
                details_ws.cell(row=idx, column=9, value=result['row'] or 'N/A')
                
                # Timestamp
                details_ws.cell(row=idx, column=10, value=result['timestamp'])
                
                # Apply row coloring and borders
                for col in range(1, 11):
                    cell = details_ws.cell(row=idx, column=col)
                    cell.border = border
                    cell.alignment = Alignment(vertical='center')
                    
                    if result['status'] == 'success':
                        cell.fill = success_fill
                    else:
                        cell.fill = failed_fill
            
            # Auto-adjust column widths
            for col in range(1, 11):
                column_letter = get_column_letter(col)
                max_length = 0
                for row in details_ws[f'{column_letter}1:{column_letter}{len(self.results)+1}']:
                    for cell in row:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                adjusted_width = min(max_length + 2, 50)
                details_ws.column_dimensions[column_letter].width = adjusted_width
            
            # === SHEET 2: SUMMARY STATISTICS ===
            summary_ws = wb.create_sheet("T·ªïng K·∫øt")
            
            # Calculate statistics
            total_entries = len(self.results)
            success_count = len([r for r in self.results if r['status'] == 'success'])
            failed_count = total_entries - success_count
            success_rate = (success_count / total_entries * 100) if total_entries > 0 else 0
            
            # Processing time
            if self.start_time:
                total_time = time.time() - self.start_time
                avg_time_per_entry = total_time / total_entries if total_entries > 0 else 0
            else:
                total_time = 0
                avg_time_per_entry = 0
            
            # Error breakdown
            error_breakdown = {}
            for result in self.results:
                if result['status'] == 'failed' and result['error_reason']:
                    error_type = result['error_reason'].split(':')[0]
                    error_breakdown[error_type] = error_breakdown.get(error_type, 0) + 1
            
            # Summary content
            summary_data = [
                ['üìä B√ÅO C√ÅO T·ªîNG K·∫æT CRAWLER', ''],
                ['', ''],
                ['Th·ªëng K√™ Chung', ''],
                ['T·ªïng s·ªë entries', total_entries],
                ['Th√†nh c√¥ng', success_count],
                ['Th·∫•t b·∫°i', failed_count],
                ['T·ª∑ l·ªá th√†nh c√¥ng', f'{success_rate:.1f}%'],
                ['', ''],
                ['Th·ªùi Gian X·ª≠ L√Ω', ''],
                ['T·ªïng th·ªùi gian', f'{total_time:.1f}s'],
                ['Trung b√¨nh/entry', f'{avg_time_per_entry:.2f}s'],
                ['', ''],
                ['Ph√¢n T√≠ch L·ªói', ''],
            ]
            
            # Add error breakdown
            for error_type, count in error_breakdown.items():
                summary_data.append([error_type, count])
            
            # Add summary data
            for row_idx, (label, value) in enumerate(summary_data, 1):
                summary_ws.cell(row=row_idx, column=1, value=label)
                summary_ws.cell(row=row_idx, column=2, value=value)
                
                # Style headers
                if label in ['üìä B√ÅO C√ÅO T·ªîNG K·∫æT CRAWLER', 'Th·ªëng K√™ Chung', 'Th·ªùi Gian X·ª≠ L√Ω', 'Ph√¢n T√≠ch L·ªói']:
                    summary_ws.cell(row=row_idx, column=1).font = Font(bold=True, size=14)
                    summary_ws.cell(row=row_idx, column=1).fill = PatternFill(start_color="E2EFDA", end_color="E2EFDA", fill_type="solid")
            
            # Auto-adjust summary columns
            summary_ws.column_dimensions['A'].width = 25
            summary_ws.column_dimensions['B'].width = 15
            
            # Save file
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_filename = f"crawler_report_{timestamp}.xlsx"
            report_path = os.path.join(output_dir, report_filename)
            
            wb.save(report_path)
            
            self.log_message(f"‚úÖ ƒê√£ t·∫°o Excel report: {report_filename}")
            return report_path
            
        except Exception as e:
            self.log_message(f"‚ùå L·ªói khi t·∫°o Excel report: {str(e)}")
            return None
    
    def create_output_package(self, base_save_dir):
        """T·∫°o organized output package v·ªõi folder structure v√† files"""
        try:
            self.log_message("üìÅ ƒêang t·∫°o output package...")
            
            # T·∫°o timestamp cho folder
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            package_name = f"crawler_output_{timestamp}"
            package_dir = os.path.join(base_save_dir, package_name)
            
            # T·∫°o folder structure
            images_dir = os.path.join(package_dir, "images")
            os.makedirs(images_dir, exist_ok=True)
            
            self.log_message(f"üìÅ T·∫°o folder: {package_dir}")
            
            # Copy successful images to images folder
            copied_count = 0
            for result in self.results:
                if result['status'] == 'success' and result['filename']:
                    source_path = os.path.join(base_save_dir, result['filename'])
                    dest_path = os.path.join(images_dir, result['filename'])
                    
                    try:
                        if os.path.exists(source_path):
                            # Copy file thay v√¨ move ƒë·ªÉ gi·ªØ nguy√™n file g·ªëc
                            import shutil
                            shutil.copy2(source_path, dest_path)
                            copied_count += 1
                    except Exception as e:
                        self.log_message(f"‚ö†Ô∏è Kh√¥ng th·ªÉ copy {result['filename']}: {str(e)}")
            
            self.log_message(f"üìÅ ƒê√£ copy {copied_count} ·∫£nh v√†o folder images/")
            
            # Generate Excel report
            excel_path = self.generate_excel_report(package_dir)
            
            # Generate text summary
            summary_path = self.generate_text_summary(package_dir)
            
            # Generate package info
            package_info = {
                'package_dir': package_dir,
                'package_name': package_name,
                'images_dir': images_dir,
                'excel_path': excel_path,
                'summary_path': summary_path,
                'total_files': copied_count + (2 if excel_path and summary_path else 1 if excel_path or summary_path else 0),
                'images_count': copied_count
            }
            
            self.log_message(f"‚úÖ T·∫°o output package th√†nh c√¥ng: {package_name}")
            return package_info
            
        except Exception as e:
            self.log_message(f"‚ùå L·ªói khi t·∫°o output package: {str(e)}")
            return None
    
    def generate_text_summary(self, output_dir):
        """T·∫°o text summary file"""
        try:
            # Calculate statistics
            total_entries = len(self.results)
            success_count = len([r for r in self.results if r['status'] == 'success'])
            failed_count = total_entries - success_count
            success_rate = (success_count / total_entries * 100) if total_entries > 0 else 0
            
            # Processing time
            if self.start_time:
                total_time = time.time() - self.start_time
            else:
                total_time = 0
            
            # Error breakdown
            error_breakdown = {}
            for result in self.results:
                if result['status'] == 'failed' and result['error_reason']:
                    error_type = result['error_reason'].split(':')[0]
                    error_breakdown[error_type] = error_breakdown.get(error_type, 0) + 1
            
            # Create summary content
            summary_content = f"""üñºÔ∏è IMAGE CRAWLER - B√ÅO C√ÅO T√ìM T·∫ÆT
{'='*60}

üìä TH·ªêNG K√ä T·ªîNG QUAN:
    ‚Ä¢ T·ªïng s·ªë entries ƒë√£ x·ª≠ l√Ω: {total_entries}
    ‚Ä¢ Th√†nh c√¥ng: {success_count} ·∫£nh ({success_rate:.1f}%)
    ‚Ä¢ Th·∫•t b·∫°i: {failed_count} ·∫£nh ({100-success_rate:.1f}%)
    ‚Ä¢ Th·ªùi gian x·ª≠ l√Ω: {total_time:.1f} gi√¢y

üìÅ K·∫æT QU·∫¢ OUTPUT:
    ‚Ä¢ Folder ·∫£nh: images/ ({success_count} files)
    ‚Ä¢ B√°o c√°o Excel: crawler_report_*.xlsx
    ‚Ä¢ File t√≥m t·∫Øt: summary.txt (file n√†y)

"""

            if error_breakdown:
                summary_content += "‚ùå PH√ÇN T√çCH L·ªñI:\n"
                for error_type, count in error_breakdown.items():
                    summary_content += f"    ‚Ä¢ {error_type}: {count} l·ªói\n"
                summary_content += "\n"

            if success_count > 0:
                summary_content += "‚úÖ DANH S√ÅCH ·∫¢NH TH√ÄNH C√îNG:\n"
                for result in self.results:
                    if result['status'] == 'success':
                        size_kb = round(result['file_size'] / 1024, 1) if result['file_size'] else 0
                        summary_content += f"    ‚Ä¢ {result['filename']} ({size_kb}KB) - {result['product_code']}\n"
                summary_content += "\n"

            if failed_count > 0:
                summary_content += "‚ùå DANH S√ÅCH L·ªñI:\n"
                for result in self.results:
                    if result['status'] == 'failed':
                        summary_content += f"    ‚Ä¢ {result['product_code']}: {result['error_reason']}\n"

            summary_content += f"\nüïí T·∫°o b√°o c√°o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"

            # Save summary file
            summary_filename = "summary.txt"
            summary_path = os.path.join(output_dir, summary_filename)
            
            with open(summary_path, 'w', encoding='utf-8') as f:
                f.write(summary_content)
            
            self.log_message(f"‚úÖ ƒê√£ t·∫°o text summary: {summary_filename}")
            return summary_path
            
        except Exception as e:
            self.log_message(f"‚ùå L·ªói khi t·∫°o text summary: {str(e)}")
            return None
    
    def stop_crawling(self):
        self.is_crawling = False
        self.log_message("ƒêang d·ª´ng qu√° tr√¨nh crawl...")
        
        # Clear queue
        while not self.download_queue.empty():
            try:
                self.download_queue.get_nowait()
                self.download_queue.task_done()
            except queue.Empty:
                break
    
    def crawling_finished(self):
        self.is_crawling = False
        self.start_button.config(state='normal')
        self.stop_button.config(state='disabled')
        self.progress_var.set(100)
        
        # Basic completion message
        basic_message = f"Crawl ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {self.processed_count} entries, th√†nh c√¥ng {self.success_count}, th·∫•t b·∫°i {self.failed_count}"
        self.log_message(basic_message)
        
        # Generate comprehensive output package
        if self.output_dir and len(self.results) > 0:
            self.log_message("üìä B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o chi ti·∫øt...")
            self.status_label.config(text="ƒêang t·∫°o b√°o c√°o...")
            
            try:
                # Create output package with reports
                package_info = self.create_output_package(self.output_dir)
                
                if package_info:
                    # Enhanced completion message with package info
                    success_rate = (self.success_count / len(self.results) * 100) if len(self.results) > 0 else 0
                    
                    enhanced_message = f"""üéâ CRAWLER HO√ÄN TH√ÄNH!

üìä K·∫øt qu·∫£ t·ªïng k·∫øt:
    ‚Ä¢ T·ªïng entries: {len(self.results)}
    ‚Ä¢ Th√†nh c√¥ng: {self.success_count} ({success_rate:.1f}%)
    ‚Ä¢ Th·∫•t b·∫°i: {self.failed_count}

üìÅ Output package ƒë√£ t·∫°o:
    ‚Ä¢ Folder: {package_info['package_name']}
    ‚Ä¢ ·∫¢nh: {package_info['images_count']} files
    ‚Ä¢ B√°o c√°o Excel: ‚úÖ
    ‚Ä¢ T√≥m t·∫Øt: ‚úÖ

üìç V·ªã tr√≠: {package_info['package_dir']}"""
                    
                    self.log_message("‚úÖ Ho√†n th√†nh t·∫°o b√°o c√°o chi ti·∫øt!")
                    self.status_label.config(text="Ho√†n th√†nh - C√≥ b√°o c√°o!")
                    
                    # Show detailed completion dialog
                    messagebox.showinfo("üéâ Ho√†n Th√†nh", enhanced_message)
                    
                    # Optionally open output folder
                    try:
                        import subprocess
                        import platform
                        
                        if platform.system() == "Windows":
                            subprocess.Popen(['explorer', package_info['package_dir']])
                        elif platform.system() == "Darwin":  # macOS
                            subprocess.Popen(['open', package_info['package_dir']])
                        else:  # Linux
                            subprocess.Popen(['xdg-open', package_info['package_dir']])
                    except:
                        pass  # Ignore if can't open folder
                
                else:
                    # Fallback to basic message if package creation failed
                    self.status_label.config(text="Ho√†n th√†nh!")
                    messagebox.showinfo("Ho√†n th√†nh", basic_message)
            
            except Exception as e:
                self.log_message(f"‚ö†Ô∏è L·ªói khi t·∫°o b√°o c√°o: {str(e)}")
                self.status_label.config(text="Ho√†n th√†nh!")
                messagebox.showinfo("Ho√†n th√†nh", basic_message)
        
        else:
            # No results to report
            self.status_label.config(text="Ho√†n th√†nh!")
            messagebox.showinfo("Ho√†n th√†nh", basic_message)
    
    def update_stats(self):
        self.root.after(0, lambda: self.total_links_label.config(text=f"T·ªïng link: {self.total_links}"))
        self.root.after(0, lambda: self.processed_label.config(text=f"ƒê√£ x·ª≠ l√Ω: {self.processed_count}"))
        self.root.after(0, lambda: self.success_label.config(text=f"Th√†nh c√¥ng: {self.success_count}"))
        self.root.after(0, lambda: self.failed_label.config(text=f"Th·∫•t b·∫°i: {self.failed_count}"))
    
    def log_message(self, message):
        timestamp = time.strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        self.root.after(0, lambda: self.log_text.insert(tk.END, log_entry))
        self.root.after(0, lambda: self.log_text.see(tk.END))

def main():
    root = tk.Tk()
    app = ImageCrawlerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
