#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script debug ƒë·ªÉ ki·ªÉm tra file Excel v√† t√¨m nguy√™n nh√¢n t·∫°i sao ch·ªâ nh·∫≠n 7/10 link
"""

import pandas as pd
import os

def debug_excel_file(file_path):
    """Debug file Excel ƒë·ªÉ t√¨m nguy√™n nh√¢n m·∫•t link"""
    
    print(f"üîç DEBUG FILE EXCEL: {file_path}")
    print("=" * 60)
    
    try:
        # ƒê·ªçc file Excel
        df = pd.read_excel(file_path)
        
        print(f"üìä Th√¥ng tin file:")
        print(f"   - T·ªïng s·ªë c·ªôt: {len(df.columns)}")
        print(f"   - T·ªïng s·ªë d√≤ng: {len(df)}")
        print(f"   - T√™n c·ªôt: {list(df.columns)}")
        print()
        
        # Ki·ªÉm tra t·ª´ng d√≤ng
        print("üìã KI·ªÇM TRA T·ª™NG D√íNG:")
        print("-" * 60)
        
        valid_count = 0
        skipped_count = 0
        
        for i in range(len(df)):
            # L·∫•y d·ªØ li·ªáu t·ª´ c·ªôt A v√† B
            col_a = df.iloc[i, 0] if len(df.columns) > 0 else None
            col_b = df.iloc[i, 1] if len(df.columns) > 1 else None
            
            # Ki·ªÉm tra d·ªØ li·ªáu
            code_str = str(col_a).strip() if pd.notna(col_a) else ""
            link_str = str(col_b).strip() if pd.notna(col_b) else ""
            
            print(f"D√≤ng {i+1:2d}:")
            print(f"   C·ªôt A (M√£): '{col_a}' -> '{code_str}'")
            print(f"   C·ªôt B (Link): '{col_b}' -> '{link_str}'")
            
            # Ph√¢n t√≠ch l√Ω do b·ªè qua
            if not code_str and not link_str:
                print(f"   ‚ùå B·ªé QUA: D√≤ng tr·ªëng ho√†n to√†n")
                skipped_count += 1
            elif code_str and not link_str:
                print(f"   ‚ùå B·ªé QUA: C√≥ m√£ nh∆∞ng kh√¥ng c√≥ link")
                skipped_count += 1
            elif not code_str and link_str:
                print(f"   ‚ö†Ô∏è  T·ª∞ T·∫†O M√É: C√≥ link nh∆∞ng kh√¥ng c√≥ m√£")
                valid_count += 1
            else:
                print(f"   ‚úÖ H·ª¢P L·ªÜ: C√≥ c·∫£ m√£ v√† link")
                valid_count += 1
            
            print()
        
        print("üìä K·∫æT QU·∫¢ PH√ÇN T√çCH:")
        print(f"   ‚úÖ H·ª£p l·ªá: {valid_count} d√≤ng")
        print(f"   ‚ùå B·ªè qua: {skipped_count} d√≤ng")
        print(f"   üìã T·ªïng c·ªông: {len(df)} d√≤ng")
        
        # Ki·ªÉm tra c√°c v·∫•n ƒë·ªÅ th∆∞·ªùng g·∫∑p
        print("\nüîç KI·ªÇM TRA V·∫§N ƒê·ªÄ TH∆Ø·ªúNG G·∫∂P:")
        print("-" * 40)
        
        # 1. Ki·ªÉm tra d√≤ng tr·ªëng ·ªü cu·ªëi
        if len(df) > 0:
            last_row_a = df.iloc[-1, 0] if len(df.columns) > 0 else None
            last_row_b = df.iloc[-1, 1] if len(df.columns) > 1 else None
            if pd.isna(last_row_a) and pd.isna(last_row_b):
                print("‚ö†Ô∏è  Ph√°t hi·ªán: D√≤ng cu·ªëi tr·ªëng (c√≥ th·ªÉ do Excel t·ª± th√™m)")
        
        # 2. Ki·ªÉm tra d√≤ng header
        first_row_a = df.iloc[0, 0] if len(df.columns) > 0 else None
        first_row_b = df.iloc[0, 1] if len(df.columns) > 1 else None
        if isinstance(first_row_a, str) and "m√£" in first_row_a.lower():
            print("‚ö†Ô∏è  Ph√°t hi·ªán: D√≤ng ƒë·∫ßu c√≥ th·ªÉ l√† header")
        
        # 3. Ki·ªÉm tra d·ªØ li·ªáu ·∫©n
        for i in range(len(df)):
            for j in range(min(2, len(df.columns))):
                cell_value = df.iloc[i, j]
                if isinstance(cell_value, str) and cell_value.strip() == "":
                    print(f"‚ö†Ô∏è  Ph√°t hi·ªán: √î tr·ªëng ·ªü d√≤ng {i+1}, c·ªôt {j+1}")
        
        print("\nüí° G·ª¢I √ù KH·∫ÆC PH·ª§C:")
        print("1. X√≥a c√°c d√≤ng tr·ªëng ho√†n to√†n")
        print("2. ƒê·∫£m b·∫£o m·ªói d√≤ng c√≥ √≠t nh·∫•t 1 link")
        print("3. Ki·ªÉm tra kh√¥ng c√≥ d√≤ng header")
        print("4. X√≥a c√°c k√Ω t·ª± ·∫©n (space, tab) th·ª´a")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {str(e)}")

def main():
    """H√†m ch√≠nh"""
    print("üîç DEBUG EXCEL - KI·ªÇM TRA T·∫†I SAO CH·ªà NH·∫¨N 7/10 LINK")
    print("=" * 70)
    
    # T√¨m file Excel trong th∆∞ m·ª•c hi·ªán t·∫°i
    excel_files = []
    for file in os.listdir('.'):
        if file.endswith(('.xlsx', '.xls')):
            excel_files.append(file)
    
    if not excel_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file Excel n√†o trong th∆∞ m·ª•c hi·ªán t·∫°i!")
        print("üìÅ C√°c file hi·ªán c√≥:")
        for file in os.listdir('.'):
            print(f"   - {file}")
        return
    
    print(f"üìÅ T√¨m th·∫•y {len(excel_files)} file Excel:")
    for i, file in enumerate(excel_files, 1):
        print(f"   {i}. {file}")
    
    # Debug file ƒë·∫ßu ti√™n (ho·∫∑c y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªçn)
    if len(excel_files) == 1:
        debug_excel_file(excel_files[0])
    else:
        print(f"\nüîç T·ª± ƒë·ªông debug file ƒë·∫ßu ti√™n: {excel_files[0]}")
        debug_excel_file(excel_files[0])

if __name__ == "__main__":
    main()
